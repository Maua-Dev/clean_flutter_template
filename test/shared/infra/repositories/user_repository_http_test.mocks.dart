// Mocks generated by Mockito 5.4.0 from annotations
// in clean_flutter_template/test/shared/infra/repositories/user_repository_http_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:clean_flutter_template/shared/datasource/external/http/user_datasource.dart'
    as _i3;
import 'package:clean_flutter_template/shared/infra/models/user_model.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserModel_0 extends _i1.SmartFake implements _i2.UserModel {
  _FakeUserModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserDatasource extends _i1.Mock implements _i3.UserDatasource {
  MockUserDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.UserModel> deleteUser(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #deleteUser,
          [userId],
        ),
        returnValue: _i4.Future<_i2.UserModel>.value(_FakeUserModel_0(
          this,
          Invocation.method(
            #deleteUser,
            [userId],
          ),
        )),
      ) as _i4.Future<_i2.UserModel>);
  @override
  _i4.Future<_i2.UserModel> getUser(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [userId],
        ),
        returnValue: _i4.Future<_i2.UserModel>.value(_FakeUserModel_0(
          this,
          Invocation.method(
            #getUser,
            [userId],
          ),
        )),
      ) as _i4.Future<_i2.UserModel>);
  @override
  _i4.Future<_i2.UserModel> updateUser(_i2.UserModel? userToUpdate) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUser,
          [userToUpdate],
        ),
        returnValue: _i4.Future<_i2.UserModel>.value(_FakeUserModel_0(
          this,
          Invocation.method(
            #updateUser,
            [userToUpdate],
          ),
        )),
      ) as _i4.Future<_i2.UserModel>);
  @override
  _i4.Future<_i2.UserModel> createUser(_i2.UserModel? userToCreate) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUser,
          [userToCreate],
        ),
        returnValue: _i4.Future<_i2.UserModel>.value(_FakeUserModel_0(
          this,
          Invocation.method(
            #createUser,
            [userToCreate],
          ),
        )),
      ) as _i4.Future<_i2.UserModel>);
  @override
  _i4.Future<List<_i2.UserModel>> getAllUsers() => (super.noSuchMethod(
        Invocation.method(
          #getAllUsers,
          [],
        ),
        returnValue: _i4.Future<List<_i2.UserModel>>.value(<_i2.UserModel>[]),
      ) as _i4.Future<List<_i2.UserModel>>);
}
